{"version":3,"sources":["services/espnService.js","components/tables/StandingsTable.js","components/tables/TeamTable.js","components/cards/TeamCard.js","League.js","components/views/homePage/HomePage.js","components/tables/RosterTable.js","components/views/teamPage/TeamPage.js","components/navigation/contentRouter/ContentRouter.js","components/navigation/navBar/NavBar.js","components/footer/Footer.js","components/templates/layout/Layout.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["dotenv","config","ESPN","scoringPeriodId","matchupPeriodId","onSuccess","onError","myClient","Client","leagueId","console","log","setCookies","espnS2","SWID","getHistoricalScoreboardForWeek","seasonId","then","historicalScoreboardForWeek","catch","err","getFreeAgents","freeAgents","getLeagueInfo","leagueInfo","getTeamsAtWeek","teams","getBoxscoreForWeek","boxscores","id","url","axios","get","response","data","scoringPeriod","teamId","team","week","scoringWeek","withRouter","props","Fragment","className","map","idx","key","finalStandingsPosition","to","onClick","onTeamClick","src","logoURL","name","abbreviation","wins","losses","totalPointsFor","totalPointsAgainst","TeamTable","matchups","matchup","winner","homeAbbrev","homeScore","awayScore","awayAbbrev","deviationFromProjection","deviationFromOptimizedTotal","TeamCard","League","Filters","NumericFilter","AutoCompleteFilter","MultiSelectFilter","SingleSelectFilter","onChange","event","target","value","setState","organization","getStuff","evt","state","onStuffSuccess","onStuffError","mapTeams","location","nickname","join","owner","getBoxScoreForWeek","onBoxScoreWeekSuccess","onBoxScoreWeekError","Object","entries","teamsAtWeek","homeTeamId","homeTeamName","awayTeamId","awayTeamName","homeTeam","awayTeam","boxScoreForWeek","onTeamsAtWeekSuccess","onTeamsAtWeekError","onLeagueInfoSuccess","onLeagueInfoError","onFreeAgentsSuccess","onFreeAgentsError","onHistoricalScoreboardForWeekSuccess","onHistoricalScoreboardForWeekError","historicalScoreboard","getStandings","onStandingsSuccess","onStandingsrror","leagueName","settings","abbrev","owners","logo","totalPointsScored","Math","round","points","record","overall","regularSeasonPointsAgainst","pointsAgainst","onGetMatchupStats","onGetPlayers","getPlayers","getPlayersSuccess","getPlayersError","onGetTeamStats","getTeamStats","getTeamStatsSuccess","getTeamStatsError","getMatchupStats","getMatchupStatsSuccess","getMatchupStatsError","schedule","home","away","totalPoints","members","status","getMyTeam","myTeam","myTeamSuccess","myTeamError","players","rosteredPlayers","matchupTableColumns","editable","type","this","toUpperCase","React","Component","roster","header","player","playerStats","playerPoolEntry","stats","statSourceId","statSplitTypeId","projectedPoints","appliedTotal","fullName","i","length","seasonAverage","appliedAverage","deviation","projectedTotal","starter","highlight","lowlight","lineupSlot","ratings","positionalRanking","ready","onWeekChange","ties","transactions","acquisitions","moveToActive","optimizedRoster","ContentRouter","path","component","exact","render","activeTeam","activeTeamMatchups","activeRoster","process","width","height","alt","href","data-scroll-nav","Layout","getAllClicked","getRoster","getRosterSuccess","getRosterError","getMyTeamSuccess","getMyTeamError","a","getTeamClicked","teamMatchups","ii","push","getTeamMatchups","rosterAry","mockRosterArray","actualScore","optimizedTotal","lineupSlotId","order","benchCompare","b","playerA","playerAslots","eligibleSlots","playerBposition","eligibleSwap","starterScoreCompare","rr","yy","pos","flex","starterFlexSwap","optimizedMyRosterFunc","mockPlayer","playerAname","playerBname","eligibleStartFlexSwap","pointDiff","benchId","starterId","oldBenchPlayerSlot","oldStarterPlayerSlot","oldBenchOrder","oldStarterOrder","optimizedTeamV1","JSON","parse","stringify","optimizedTeamV2","optimizedTeamV3","optimizedTeamV4","compare","teamA","teamB","comparison","sortedOptimizedRoster","sort","sortedRoster","homeId","awayId","onGetLeagueInfoSuccess","onGetLeagueInfoError","sortedTeams","winningPercentage","playoffSeed","rosterAtWeek","rankCalculatedFinal","transactionCounter","onBoxScoreSuccess","onBoxScoreError","boxScore","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c22f4ff2.chunk.js","sourcesContent":["import axios from 'axios'\nimport dotenv from 'dotenv'\nimport _ from 'lodash'\nimport { Client } from 'espn-fantasy-football-api'\n\n\ndotenv.config()\n\n// const theClient = myClient.setCookies({ espnS2: `AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D`, SWID: `{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}` })\n\nclass ESPN {\n\n\n    static getHistoricalScoreboardForWeek(scoringPeriodId, matchupPeriodId, onSuccess, onError) {\n        const myClient = new Client({ leagueId: 439532 })\n        console.log('da league HistoricalScoreboardForWeek')\n\n        myClient.setCookies({ espnS2: `AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D`, SWID: `{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}` })\n        let data;\n        myClient.getHistoricalScoreboardForWeek({ seasonId: 2019, scoringPeriodId: scoringPeriodId, matchupPeriodId: matchupPeriodId })\n            .then((historicalScoreboardForWeek) => {\n                data = historicalScoreboardForWeek;\n                onSuccess(data)\n            })\n            .catch(err => onError)\n    }\n\n\n    static getFreeAgents(scoringPeriodId, onSuccess, onError) {\n        const myClient = new Client({ leagueId: 439532 })\n        console.log('da league freeAgents')\n\n        myClient.setCookies({ espnS2: `AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D`, SWID: `{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}` })\n        let data;\n        myClient.getFreeAgents({ seasonId: 2019, scoringPeriodId: scoringPeriodId })\n            .then((freeAgents) => {\n                data = freeAgents;\n                onSuccess(data)\n            })\n            .catch(err => onError)\n    }\n\n\n    static getLeagueInfo(onSuccess, onError) {\n        const myClient = new Client({ leagueId: 439532 })\n        console.log('da league leagueInfo')\n\n        myClient.setCookies({ espnS2: `AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D`, SWID: `{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}` })\n        let data;\n        myClient.getLeagueInfo({ seasonId: 2019 })\n            .then((leagueInfo) => {\n                data = leagueInfo;\n                onSuccess(data)\n            })\n            .catch(err => onError)\n    }\n\n    static getTeamsAtWeek(scoringPeriodId, onSuccess, onError) {\n        const myClient = new Client({ leagueId: 439532 })\n        console.log('da league teams')\n\n        myClient.setCookies({ espnS2: `AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D`, SWID: `{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}` })\n        let data;\n        myClient.getTeamsAtWeek({ seasonId: 2019, scoringPeriodId: scoringPeriodId })\n            .then((teams) => {\n                data = teams;\n                onSuccess(data)\n            })\n            .catch(err => onError)\n    }\n\n    static getBoxScoreForWeek(scoringPeriodId, matchupPeriodId, onSuccess, onError) {\n        const myClient = new Client({ leagueId: 439532 })\n        console.log('da league')\n\n        myClient.setCookies({ espnS2: `AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D`, SWID: `{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}` })\n        let data;\n        myClient.getBoxscoreForWeek({ seasonId: 2019, scoringPeriodId: scoringPeriodId, matchupPeriodId: matchupPeriodId })\n            .then((boxscores) => {\n                data = boxscores;\n                onSuccess(data)\n            })\n            .catch(err => onError)\n    }\n\n\n    static getLeague(leagueId, onSuccess, onError) {\n        const id = leagueId\n        const year = 2019\n        const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${id}`\n        const myClient = new Client({ leagueId: 439532 })\n        // const config = myClient.setCookies({ espnS2: 'AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D', SWID: '{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}' })\n        axios.get(url)\n            .then(response => onSuccess(response))\n            .catch(err => onError(err))\n    }\n\n    static getStandings(leagueId, onSuccess, onError) {\n        const id = leagueId\n        const year = 2019\n        const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${id}?view=mLiveScoring&view=mMatchupScore&view=mRoster&view=mSettings&view=mStandings&view=mStatus&view=mTeam&view`\n        const myClient = new Client({ leagueId: 439532 })\n        axios.get(url)\n            .then(response => onSuccess(response.data))\n            .catch(err => onError(err))\n    }\n\n    static getRoster(scoringPeriod, teamId, leagueId, onSuccess, onError) {\n        const league = leagueId\n        const team = teamId\n        const week = scoringPeriod\n        const year = 2019\n        const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${league}?forTeamId=${team}&scoringPeriodId=${week}&view=mRoster`\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${id}?view=kona_player_info`\n        axios.get(url)\n            .then(response => onSuccess(response.data))\n            .catch(err => onError(err))\n    }\n\n    // static getFreeAgents(leagueId, onSuccess, onError) {\n    //     const id = leagueId\n    //     const year = 2019\n    //     // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019?view=kona_game_state`\n    //     const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${id}?view=kona_player_info`\n    //     axios.get(url)\n    //         .then(response => onSuccess(response.data))\n    //         .catch(err => onError(err))\n    // }\n\n    static getTeamStats(scoringPeriod, teamId, leagueId, onSuccess, onError) {\n        const id = leagueId\n        const year = 2019\n        const team = teamId\n        const scoringWeek = scoringPeriod\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/551382?view=modular&view=mNav&view=mMatchupScore&view=mRoster&view=mScoreboard&view=mSettings&view=mTopPerformers&view=mTeam`\n        const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?forTeamId=${team}&scoringPeriodId=${scoringWeek}&view=mRoster`\n        axios.get(url)\n            .then(response => onSuccess(response.data))\n            .catch(err => onError(err))\n    }\n\n    static getMatchupStats(scoringPeriod, teamId, leagueId, onSuccess, onError) {\n        const id = leagueId\n        const year = 2019\n        const team = teamId\n        const scoringWeek = scoringPeriod\n        const matchupPeriodId = 13\n        const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?view=mLiveScoring&view=mMatchupScore&view=mRoster&view=mSettings&view=mStandings&view=mStatus&view=mTeam&view=modular&view=mNav`\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?view=modular&view=mNav&view=mMatchupScore&view=mRoster&view=mScoreboard&view=mSettings&view=mTopPerformers&view=mTeam`\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?forTeamId=${team}&scoringPeriodId=${scoringWeek}&view=mRoster`\n        axios.get(url)\n            .then(response => {\n                // const schedule = _.get(response.data, 'schedule'); // Data is an array instead of object\n                // const data = _.filter(schedule, { matchupPeriodId });\n                onSuccess(response)\n            })\n            .catch(err => onError(err))\n    }\n\n    static myTeam(scoringPeriod, teamId, leagueId, onSuccess, onError) {\n        const id = leagueId\n        const year = 2019\n        const team = teamId\n\n        const scoringWeek = scoringPeriod\n        const matchupPeriodId = 13\n        const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?rosterForTeamId=${team}&view=mDraftDetail&view=mLiveScoring&view=mMatchupScore&view=mPendingTransactions&view=mPositionalRatings&view=mRoster&view=mSettings&view=mTeam&view=modular&view=mNav`\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?view=modular&view=mNav&view=mMatchupScore&view=mRoster&view=mScoreboard&view=mSettings&view=mTopPerformers&view=mTeam`\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?forTeamId=${team}&scoringPeriodId=${scoringWeek}&view=mRoster`\n        axios.get(url)\n            .then(response => {\n                // const schedule = _.get(response.data, 'schedule'); // Data is an array instead of object\n                // const data = _.filter(schedule, { matchupPeriodId });\n                onSuccess(response)\n            })\n            .catch(err => onError(err))\n    }\n\n    static boxScore(scoringPeriod, leagueId, onSuccess, onError) {\n        const id = leagueId\n        const year = 2019\n\n        const scoringWeek = scoringPeriod\n        const matchupPeriodId = 13\n        const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?view=modular&view=mNav&view=mMatchupScore&view=mRoster&view=mScoreboard&view=mSettings&view=mTopPerformers&view=mTeam&view=kona_player_info&view=player_wl`\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?view=modular&view=mNav&view=mMatchupScore&view=mRoster&view=mScoreboard&view=mSettings&view=mTopPerformers&view=mTeam`\n        // const url = `https://fantasy.espn.com/apis/v3/games/ffl/seasons/2019/segments/0/leagues/${id}?forTeamId=${team}&scoringPeriodId=${scoringWeek}&view=mRoster`\n        axios.get(url)\n            .then(response => {\n                // const schedule = _.get(response.data, 'schedule'); // Data is an array instead of object\n                // const data = _.filter(schedule, { matchupPeriodId });\n                onSuccess(response)\n            })\n            .catch(err => onError(err))\n    }\n\n}\nexport default ESPN\n","import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\n\n\nconst StandingsTable = props => {\n    return (\n        <React.Fragment>\n            <table className='table standings-table'>\n                <thead>\n                    <tr>\n                        <th>\n                            Rank\n                        </th>\n                        <th>\n                            Team\n                                </th>\n                        <th>\n                            Record\n                                </th>\n                        {/* <th>\n                            Games Back\n                                </th> */}\n                        <th>\n                            Points For\n                                </th>\n                        <th>\n                            Points Against\n                                </th>\n                    </tr>\n\n                </thead>\n                <tbody>\n                    {props.teams.map((team, idx) => {\n                        // console.log(team)\n                        return (\n                            <tr key={idx} id={team.id} >\n                                <td>{team.finalStandingsPosition}</td>\n                                <Link to='/teamPage'>\n                                    <td key={idx}\n                                        id={team.id}\n                                        onClick={props.onTeamClick}\n                                        className='name-and-logo'>\n                                        <div >\n                                            <img className='standings-table-logo' src={team.logoURL} />\n                                        </div>\n                                        {team.name} ({team.abbreviation})\n                                 </td>\n                                </Link>\n                                <td>\n                                    {(team.wins + \" - \" + team.losses)}\n                                </td>\n                                {/* <td>\n                                    {team.record.gamesBack}\n                                </td> */}\n                                <td>\n                                    {team.totalPointsFor}\n                                </td>\n                                <td>\n                                    {team.totalPointsAgainst}\n                                </td>\n\n\n\n                            </tr>\n                        )\n                    })}\n                </tbody>\n\n            </table>\n        </React.Fragment>\n    )\n}\nexport default withRouter(StandingsTable)","import React from 'react'\n\nconst TeamTable = props => {\n    return (\n        <React.Fragment>\n            <div className='row'>\n                <table className='table team-table'>\n                    <tbody>\n                        <tr className='roster-table-head-row'>\n                            <td><p>Week</p></td>\n                            <td><p>1</p></td>\n                            <td><p>2</p></td>\n                            <td><p>3</p></td>\n                            <td><p>4</p></td>\n                            <td><p>5</p></td>\n                            <td><p>6</p></td>\n                            <td><p>7</p></td>\n                            <td><p>8</p></td>\n                            <td><p>9</p></td>\n                            <td><p>10</p></td>\n                            <td><p>11</p></td>\n                            <td><p>12</p></td>\n                            <td><p>13</p></td>\n                            <td><p>14-15</p></td>\n                            <td><p>16-17</p></td>\n                            <td><p>Total</p></td>\n                        </tr>\n                        <tr className='roster-table-head-row'>\n                            <td>Outcome</td>\n                            {props.matchups.map((matchup, idx) => {\n                                console.log('matchups: ', matchup)\n                                return (\n                                    <td className={'matchup-table-outcome' + (matchup.winner === props.team.abbreviation ? '-winner' : '-loser')}> {matchup.homeAbbrev} {matchup.homeScore} - {matchup.awayScore} {matchup.awayAbbrev}</td>\n                                )\n                            })}\n                        </tr>\n                        <tr className='roster-table-head-row'>\n                            <td>Deviation from Projection</td>\n                            <td>{props.deviationFromProjection}</td>\n                        </tr>\n                        <tr className='roster-table-head-row'>\n                            <td>Points Away from Optimal Lineup</td>\n                            <td>{props.deviationFromOptimizedTotal}</td>\n                        </tr>\n\n                        {/* <tr>\n                            <h3> Opponent's Deviation from Projection</h3>\n\n                        </tr> */}\n                    </tbody>\n                    <tbody>\n\n                    </tbody>\n\n                </table>\n            </div>\n        </React.Fragment >\n    )\n}\nexport default TeamTable","import React from 'react'\nimport TeamTable from '../tables/TeamTable'\n\nconst TeamCard = props => {\n    return (\n        <React.Fragment>\n            {props.teams.map((team, idx) => {\n\n                return (\n                    <div className='team-card' key={idx}>\n                        <div className='team-card-container'>\n                            <div className='team-card-header'>\n                                <img className='team-card-img' src={team.logoURL} />\n                                <h2>{team.name}</h2>\n                            </div>\n                            <TeamTable\n                                team={team}\n                                matchups={props.matchups}\n                            />\n                        </div>\n                    </div>\n                )\n            })}\n\n        </React.Fragment>\n    )\n}\nexport default TeamCard","import React, { useMemo, useState, useEffect } from 'react'\nimport ESPN from './services/espnService'\nimport { Client } from 'espn-fantasy-football-api/node-dev'\n// import Table from './components/Table'\nimport ReactDataGrid from 'react-data-grid'\nimport { Toolbar, Data, Filters } from \"react-data-grid-addons\";\nimport StandingsTable from './components/tables/StandingsTable'\nimport TeamCard from './components/cards/TeamCard';\n\n\nconst {\n    NumericFilter,\n    AutoCompleteFilter,\n    MultiSelectFilter,\n    SingleSelectFilter\n} = Filters;\n\n// const selectors = Data.Selectors;\n// const myClient = new Client({ leagueId: 439532 })\n// myClient.setCookies({ espnS2: `AEAeVN%2BhNMhp67TD%2BIcKwy0QCd1KFkfgtLIV3FtZ4LgeSwI9W3zZyLlIq3ljbHzoQg6lpXht7rDN6Psd4irXYr47MSlvj8dz4aAyI9tUe3Olk1F3hRlxv4IPlLQcB8LTyg5LLJg5dzjOpsVndffbqMt6Hj4QOTjXSnyyIHN%2FRMPK6qu%2Bs%2Bzg1wI4Wd6WDSgBRmFc3ZN5dONd75LfbES1gxQdXd34fHGagz%2BXQqyIHW1KuWvrKcT8LBU1CeDW%2BPt3BsRjX8mF4TeMlBeRpZ%2FBqR0A0%2B3bJW%2Fu2QS%2FnDi%2FZ%2FkvXcAfMkPd4SFykafpSU6bseg%3D`, SWID: `{80C81CC1-0A6F-4A4D-A84F-CA8081200E28}` })\n// let data;\n// myClient.getBoxscoreForWeek({ seasonId: 2018, scoringPeriodId: 5, matchupPeriodId: 5 }).then((boxscores) => {\n//     data = boxscores;\n// });\n\n\nclass League extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            leagueName: '',\n            teams: [],\n            seasonId: '',\n            scoringPeriodId: '',\n            leagueId: '',\n            status: [],\n            players: [],\n            rosteredPlayers: [],\n            freeAgents: [],\n            schedule: [],\n            matchupTableColumns: [\n                { key: 'week', name: 'Wk', editable: false },\n                { key: 'awayTeam', name: 'AWAY', editable: false },\n                { key: 'homeTeam', name: 'HOME', editable: false },\n                { key: 'awayScore', name: 'Away Score', editable: false },\n                { key: 'homeScore', name: 'Home Score', editable: false },\n                { key: 'winner', name: 'Winner', editable: false },\n\n            ],\n            leagueInfo: '',\n            teamsAtWeek: '',\n            boxScoreForWeek: '',\n            historicalScoreboard: '',\n            week: '',\n\n\n        }\n        this.getStandings()\n        this.getBoxScoreForWeek()\n        this.getTeamsAtWeek()\n        this.getLeagueInfo()\n        this.getHistoricalScoreboardForWeek()\n        this.getFreeAgents()\n        this.getMyTeam()\n\n\n    }\n\n    onChange = event => {\n        const key = event.target.name;\n        const value = event.target.value;\n        this.setState({\n            organization: {\n                [key]: value\n            }\n        });\n    };\n\n    getStuff = evt => {\n        var scoringPeriodId = 5\n\n        ESPN.getStuff(this.state.scoringPeriodId, this.onStuffSuccess, this.onStuffError)\n    }\n\n    onStuffSuccess = evt => {\n        console.log('Stuff success:', evt)\n\n    }\n\n    onStuffError = err => {\n        console.log('Stuff errror', err)\n    }\n\n    // handleFilterChange = filter => filters => {\n    //     const newFilters = { ...filters };\n    //     if (filter.filterTerm) {\n    //         newFilters[filter.column.key] = filter;\n    //     } else {\n    //         delete newFilters[filter.column.key];\n    //     }\n    //     return newFilters;\n    // };\n\n    // getValidFilterValues = (rows, columnId) => {\n    //     return rows\n    //         .map(r => r[columnId])\n    //         .filter((item, i, a) => {\n    //             return i === a.indexOf(item);\n    //         });\n    // }\n\n    // getRows = (rows, filters) => {\n    //     return selectors.getRows({ rows, filters });\n    // }\n\n\n    mapTeams = (team) => {\n        // console.log(team)\n        var name = [team.location, team.nickname].join(' ')\n        var id = team.id\n        var abbreviation = team.abbreviation\n        var owner = team.owner[0]\n        return name, id, abbreviation, owner\n\n    }\n    getBoxScoreForWeek = evt => {\n        var scoringPeriodId = 9\n        var matchupPeriodId = 9\n        ESPN.getBoxScoreForWeek(this.state.scoringPeriodId, matchupPeriodId, this.onBoxScoreWeekSuccess, this.onBoxScoreWeekError)\n    }\n\n    onBoxScoreWeekSuccess = evt => {\n        console.log(\"da league box score week success\", evt)\n        var matchups = evt.map((matchup, idx) => {\n            for (const [key, value] of Object.entries(this.state.teamsAtWeek)) {\n                if (value.id === matchup.homeTeamId) {\n                    var homeTeamName = value.name\n                }\n                if (value.id === matchup.awayTeamId) {\n                    var awayTeamName = value.name\n                }\n            }\n            // var week = matchup.matchupPeriodId\n            var homeTeam = homeTeamName\n            var homeScore = matchup.homeScore\n            var awayTeam = awayTeamName\n            var awayScore = matchup.awayScore\n            var winner = (awayScore < homeScore) ? homeTeam : awayTeam\n            if (awayScore === homeScore) {\n                var winner = 'TIE'\n            }\n\n            return {\n                // 'week': week,\n                'homeTeam': homeTeam,\n                'homeScore': homeScore,\n                'awayTeam': awayTeam,\n                'awayScore': awayScore,\n                'winner': winner,\n            }\n        })\n\n        this.setState({\n            ...this.state,\n            boxScoreForWeek: matchups,\n        })\n    }\n\n    onBoxScoreWeekError = err => {\n        console.log('boxScooore errror', err)\n    }\n\n    getTeamsAtWeek = evt => {\n\n        ESPN.getTeamsAtWeek(this.state.scoringPeriodId, this.onTeamsAtWeekSuccess, this.onTeamsAtWeekError)\n    }\n\n    onTeamsAtWeekSuccess = evt => {\n        console.log('da league TeamsAtWeek success:', evt)\n        this.setState({\n            ...this.state,\n            teamsAtWeek: evt,\n        })\n    }\n\n    onTeamsAtWeekError = err => {\n        console.log('TeamsAtWeek errror', err)\n    }\n\n    getLeagueInfo = evt => {\n        ESPN.getLeagueInfo(this.onLeagueInfoSuccess, this.onLeagueInfoError)\n    }\n\n    onLeagueInfoSuccess = evt => {\n        console.log('da league LeagueInfo success:', evt)\n        this.setState({\n            ...this.state,\n            leagueInfo: evt,\n        })\n    }\n\n    onLeagueInfoError = err => {\n        console.log('LeagueInfo errror', err)\n    }\n\n    getFreeAgents = evt => {\n        var scoringPeriodId = 5\n\n        ESPN.getFreeAgents(this.state.scoringPeriodId, this.onFreeAgentsSuccess, this.onFreeAgentsError)\n    }\n\n    onFreeAgentsSuccess = evt => {\n        console.log('da league FreeAgents success:', evt)\n        this.setState({\n            ...this.state,\n            freeAgents: evt,\n        })\n    }\n\n    onFreeAgentsError = err => {\n        console.log('FreeAgents errror', err)\n    }\n\n    getHistoricalScoreboardForWeek = evt => {\n        var scoringPeriodId = 5\n        var matchupPeriodId = 5\n        ESPN.getHistoricalScoreboardForWeek(1, 1, this.onHistoricalScoreboardForWeekSuccess, this.onHistoricalScoreboardForWeekError)\n    }\n\n    onHistoricalScoreboardForWeekSuccess = evt => {\n        console.log('da league HistoricalScoreboardForWeek success:***************************', evt)\n        this.setState({\n            ...this.state,\n            historicalScoreboard: evt,\n        })\n    }\n\n    onHistoricalScoreboardForWeekError = err => {\n        console.log('HistoricalScoreboardForWeek errror', err)\n    }\n\n    getStandings = evt => {\n        ESPN.getStandings(551382, this.onStandingsSuccess, this.onStandingsrror)\n\n    }\n\n    onStandingsSuccess = evt => {\n        console.log('public standings success', evt)\n        var leagueName = evt.settings.name\n        var seasonId = evt.id\n        var scoringPeriodId = evt.scoringPeriodId\n\n        var teams = evt.teams.map((team, idx) => {\n            var name = [team.location, team.nickname].join(' ')\n            var id = team.id\n            var abbreviation = team.abbrev\n            var owner = team.owners[0]\n            var logoURL = team.logo\n            var totalPointsScored = Math.round(team.points * 10) / 10\n            var record = team.record.overall\n            var wins = team.record.overall.wins\n            var losses = team.record.overall.losses\n            var regularSeasonPointsAgainst = Math.round(team.record.overall.pointsAgainst * 10) / 10\n            var finalStandingsPosition\n\n            return {\n                'id': id,\n                'name': name,\n                'abbreviation': abbreviation,\n                'owner': owner,\n                [id]: name,\n                'logoURL': logoURL,\n                'totalPointsScored': totalPointsScored,\n                'regularSeasonPointsAgainst': regularSeasonPointsAgainst,\n                'record': record,\n                'wins': wins,\n                'losses': losses,\n            }\n\n        })\n        this.setState({\n            ...this.state,\n            leagueName: leagueName,\n            teams: teams,\n            seasonId: seasonId,\n            scoringPeriodId: scoringPeriodId,\n\n        })\n        this.onGetMatchupStats()\n\n        // this.onGetPlayers()\n        // this.onGetTeamStats()\n    }\n\n    onStandingsrror = err => {\n        console.log('standings err', err)\n    }\n\n    onGetPlayers = evt => {\n        ESPN.getPlayers(551382, this.getPlayersSuccess, this.getPlayersError)\n    }\n\n    getPlayersSuccess = evt => {\n        console.log('public league get players success', evt)\n        // this.onGetFreeAgents()\n    }\n\n    getPlayersError = err => {\n        console.log('public league get players err ', err)\n    }\n\n    // onGetFreeAgents = evt => {\n    //     ESPN.getFreeAgents(551382, this.getFreeAgentsSuccess, this.getFreeAgentsError)\n    // }\n\n    // getFreeAgentsSuccess = evt => {\n    //     // console.log('get FreeAgents success', evt)\n    // }\n\n    // getFreeAgentsError = err => {\n    //     console.log('get FreeAgents err ', err)\n    // }\n\n    onGetTeamStats = evt => {\n        ESPN.getTeamStats(13, 1, 551382, this.getTeamStatsSuccess, this.getTeamStatsError)\n    }\n\n    getTeamStatsSuccess = evt => {\n        console.log('public get TeamStats success', evt)\n    }\n\n    getTeamStatsError = err => {\n        console.log('get TeamStats err ', err)\n    }\n\n    onGetMatchupStats = evt => {\n        ESPN.getMatchupStats(13, 1, 551382, this.getMatchupStatsSuccess, this.getMatchupStatsError)\n    }\n\n    getMatchupStatsSuccess = evt => {\n\n        console.log(' public matchup succcesssssssss', evt)\n\n        var state = this.state.teams\n        var matchups = evt.data.schedule.map((matchup, idx) => {\n            var homeAway = []\n\n            for (const [key, value] of Object.entries(this.state.teams)) {\n                if (value.id === matchup.home.teamId) {\n                    var homeTeam = value.name\n                }\n                if (value.id === matchup.away.teamId) {\n                    var awayTeam = value.name\n                }\n            }\n\n            var week = matchup.matchupPeriodId\n            var homeTeam = homeTeam\n            var homeScore = Math.round(matchup.home.totalPoints * 10) / 10\n            var awayTeam = awayTeam\n            var awayScore = Math.round(matchup.away.totalPoints * 10) / 10\n            var winner = (matchup.winner === \"HOME\") ? homeTeam : awayTeam\n            return {\n                'week': week,\n                'homeTeam': homeTeam,\n                'homeScore': homeScore,\n                'awayTeam': awayTeam,\n                'awayScore': awayScore,\n                'winner': winner,\n            }\n\n        })\n        this.setState({\n            ...this.state,\n            members: evt.members,\n            schedule: matchups,\n            seasonId: evt.seasonId,\n            status: evt.status,\n        })\n    }\n\n    getMatchupStatsError = err => {\n        console.log('get MatchupStats err ', err)\n    }\n\n    onTeamClick = evt => {\n        var target = evt.target.id\n        var value = evt.value\n        console.log('team clicked', this.state)\n    }\n\n    getMyTeam = evt => {\n        ESPN.myTeam(13, 1, 551382, this.myTeamSuccess, this.myTeamError)\n    }\n\n    myTeamSuccess = evt => {\n        console.log('public get TeamStats success', evt)\n    }\n\n    myTeamError = err => {\n        console.log('get TeamStats err ', err)\n    }\n\n\n    render() {\n        // console.log('state rendered', this.state)\n\n        return (\n            <React.Fragment>\n                <div>\n                    <select type='dropdown' name='scoringPeriodId' onChange={this.onChange}>\n                        <option value='1'>1</option>\n                        <option value='2'>2</option>\n                        <option value='3'>3</option>\n                        <option value='4'>4</option>\n                        <option value='5'>5</option>\n                        <option value='6'>6</option>\n                        <option value='7'>7</option>\n                        <option value='8'>8</option>\n                        <option value='9'>9</option>\n                        <option value='10'>10</option>\n                        <option value='11'>11</option>\n                        <option value='12'>12</option>\n                        <option value='13'>13</option>\n                        <option value='14'>14</option>\n                        <option value='15'>15</option>\n                        <option value='16'>16</option>\n                        <option value='17'>17</option>\n\n                    </select>\n                    {(this.state.teamsAtWeek && this.state.boxScoreForWeek) && (\n                        <div className='team-card-flex'>\n\n                            <TeamCard\n                                teams={this.state.teamsAtWeek}\n                                matchups={this.state.boxScoreForWeek}\n                            />\n                        </div>\n                    )}\n                    {this.state.leagueInfo && (\n\n                        <h1>\n                            {this.state.leagueInfo.name.toUpperCase()} STANDINGS\n                    </h1>\n                    )}\n                    {this.state.teamsAtWeek && (\n\n                        <StandingsTable\n                            teams={this.state.teamsAtWeek}\n                        />\n                    )}\n\n                    <h1>MATCHUPS </h1>\n                    <table className='matchupsTable'>\n                        <thead>\n                            <tr>\n                                <th id='week'>\n                                    WEEK\n                                    </th>\n                                <th>\n                                    Away Team\n                                    </th>\n                                <th>\n                                    Away Score\n                                    </th>\n                                <th>\n                                    Home Team\n                                    </th>\n                                <th>\n                                    Home Score\n                                    </th>\n\n                                <th>\n                                    Winner\n                                    </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.boxScoreForWeek && (\n                                this.state.boxScoreForWeek.map((matchup, idx) => {\n                                    const week = matchup.week\n                                    const winner = matchup.winner\n                                    const homeTeam = matchup.homeTeam\n                                    const awayTeam = matchup.awayTeam\n                                    const homeScore = matchup.homeScore\n                                    const awayScore = matchup.awayScore\n                                    return (\n                                        <tr key={idx}>\n                                            <td id='week'>{week}</td>\n                                            <td className={homeScore > awayScore ? 'winner' : 'loser'}>{homeTeam}</td>\n                                            <td className={homeScore > awayScore ? 'winner' : 'loser'}>{homeScore}</td>\n                                            <td className={homeScore < awayScore ? 'winner' : 'loser'}>{awayTeam}</td>\n                                            <td className={homeScore < awayScore ? 'winner' : 'loser'}>{awayScore}</td>\n                                            <td>{winner}</td>\n                                        </tr>\n                                    )\n                                })\n                            )}\n                        </tbody>\n                    </table>\n\n                    {this.state.leagueName && (\n                        <div className='team-card-flex'>\n\n                            <TeamCard\n                                teams={this.state.teams}\n                                matchups={this.state.schedule}\n                            />\n                        </div>\n                    )}\n                    <h1>\n                        {this.state.leagueName.toUpperCase()} STANDINGS\n                    </h1>\n                    {this.state.leagueName && (\n\n                        <StandingsTable\n                            teams={this.state.teams}\n                        />\n                    )}\n\n\n                    <h1>MATCHUPS </h1>\n                    <table className='matchupsTable'>\n                        <thead>\n                            <tr>\n                                <th id='week'>\n                                    WEEK\n                                    </th>\n                                <th>\n                                    Away Team\n                                    </th>\n                                <th>\n                                    Away Score\n                                    </th>\n                                <th>\n                                    Home Team\n                                    </th>\n                                <th>\n                                    Home Score\n                                    </th>\n\n                                <th>\n                                    Winner\n                                    </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.schedule && (\n                                this.state.schedule.map((matchup, idx) => {\n                                    const week = matchup.week\n                                    const winner = matchup.winner\n                                    const homeTeam = matchup.homeTeam\n                                    const awayTeam = matchup.awayTeam\n                                    const homeScore = matchup.homeScore\n                                    const awayScore = matchup.awayScore\n                                    return (\n                                        <tr key={idx}>\n                                            <td id='week'>{week}</td>\n                                            <td className={homeScore > awayScore ? 'winner' : 'loser'}>{homeTeam}</td>\n                                            <td className={homeScore > awayScore ? 'winner' : 'loser'}>{homeScore}</td>\n                                            <td className={homeScore < awayScore ? 'winner' : 'loser'}>{awayTeam}</td>\n                                            <td className={homeScore < awayScore ? 'winner' : 'loser'}>{awayScore}</td>\n                                            <td>{winner}</td>\n                                        </tr>\n                                    )\n                                })\n                            )}\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment >\n        )\n    }\n}\nexport default League;\n\n","import React from 'react'\nimport { withRouter } from \"react-router-dom\"\nimport StandingsTable from '../../tables/StandingsTable'\n\n\nconst HomePage = props => {\n    return (\n        <React.Fragment>\n            <div>\n                <h1>Welcome to {props.leagueName}</h1>\n\n                <h2>Final Season Standings</h2>\n                <StandingsTable\n                    teams={props.teams}\n                    onTeamClick={props.onTeamClick}\n                />\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default withRouter(HomePage)\n","import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport './RosterTable.css'\n\n\nconst RosterTable = props => {\n    var roster = props.roster\n\n    return (\n        <React.Fragment>\n            <div className=\"rosterTableContainer\">\n                <h1 className='roster-title'>{props.header}</h1>\n                <table className='roster-table'>\n                    <thead className='roster-table-head'>\n                        <tr className='roster-table-head-row'>\n                            <td className='roster-table-head-data'>Pos</td>\n                            <td className='roster-table-head-data'>Player(rk)</td>\n                            <td className='roster-table-head-data bold'>Actual Score</td>\n                            <td className='roster-table-head-data'>Projected Score</td>\n                            <td className='roster-table-head-data'>Deviation From Projection</td>\n                            {/* <td className='roster-table-head-data'>Position Ranking</td>\n                        <td className='roster-table-head-data'>Overall Ranking</td> */}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {roster.map((player, idx) => {\n                            // var projectedPoints = Math.round(player.playerPoolEntry.player.stats[2].appliedTotal * 10) / 10\n                            var playerStats = player.playerPoolEntry.player.stats\n                            for (const [key, value] of Object.entries(playerStats)) {\n                                if (value.statSourceId == 1 && value.statSplitTypeId == 1 && value.scoringPeriodId == props.scoringPeriodId) {\n                                    var projectedPoints = Math.round(value.appliedTotal * 10) / 10\n                                    break;\n                                }\n\n\n                            }\n                            for (const [key, value] of Object.entries(playerStats)) {\n                                if (value.statSourceId == 0 && value.statSplitTypeId == 1 && value.scoringPeriodId == props.scoringPeriodId) {\n                                    var points = Math.round(value.appliedTotal * 10) / 10\n                                    break;\n                                }\n                            }\n                            if (points == null) {\n                                points = 0\n                                player.playerPoolEntry.player.fullName = `${player.playerPoolEntry.player.fullName} *BYE*`\n\n                            }\n                            // var points = Math.round(player.playerPoolEntry.appliedStatTotal * 10) / 10\n                            var i = player.playerPoolEntry.player.stats.length - 1\n                            var seasonAverage = Math.round(player.playerPoolEntry.player.stats[i].appliedAverage * 10) / 10\n                            var deviation = Math.round((points - projectedPoints) * 10) / 10\n                            var deviationAvg = Math.round((points - seasonAverage) * 10) / 10\n\n                            var projectedTotal = 0\n\n                            if (player.starter) {\n                                projectedTotal += projectedTotal\n                            }\n                            return (\n                                <tr className={'roster-table-body-row' + (player.highlight ? ' highlight' : '') + (player.lowlight ? ' lowlight' : '')}>\n                                    <td className='roster-table-body-data'>{player.lineupSlot}</td>\n                                    <td className='roster-table-body-data'> {player.playerPoolEntry.player.fullName} ({player.playerPoolEntry.ratings[0].positionalRanking})</td>\n                                    <td className='roster-table-body-data bold'>{points}</td>\n                                    <td className='roster-table-body-data proj'>{projectedPoints}</td>\n                                    <td className={'roster-table-body-data' + (deviation > 0 ? ' positive' : ' negative')}>{deviation}</td>\n                                    {/* <td className='roster-table-body-data'>{player.playerPoolEntry.ratings[0].positionalRanking}</td>\n                                <td className='roster-table-body-data'>{player.playerPoolEntry.ratings[0].totalRanking}</td> */}\n\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n\n        </React.Fragment>\n    )\n}\nexport default withRouter(RosterTable)","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport TeamCard from '../../cards/TeamCard'\nimport TeamTable from '../../tables/TeamTable'\nimport RosterTable from '../../tables/RosterTable'\n\nconst TeamPage = props => {\n    console.log(props.team)\n    return (\n        <React.Fragment>\n            {props.ready && (\n                <React.Fragment>\n                    <div className='team-card'>\n                        <div className='team-card-header'>\n                            <img className='team-card-img' src={props.team.logoURL} />\n                            <h2>{props.team.name}</h2>\n                            <select type='dropdown' name='scoringPeriodId' onChange={props.onWeekChange} value={props.scoringPeriodId}>\n                                <option value='1'>1</option>\n                                <option value='2'>2</option>\n                                <option value='3'>3</option>\n                                <option value='4'>4</option>\n                                <option value='5'>5</option>\n                                <option value='6'>6</option>\n                                <option value='7'>7</option>\n                                <option value='8'>8</option>\n                                <option value='9'>9</option>\n                                <option value='10'>10</option>\n                                <option value='11'>11</option>\n                                <option value='12'>12</option>\n                                <option value='13'>13</option>\n                                <option value='14'>14</option>\n                                <option value='15'>15</option>\n                                <option value='16'>16</option>\n                                <option value='17'>17</option>\n\n                            </select>\n                            <div>\n                                <h5>{props.team.wins}-{props.team.losses}-{props.team.record.ties}</h5>\n                                <h5>({props.team.finalStandingsPosition} out of 10)</h5>\n                            </div>\n                            <div>\n                                <h6>{props.team.transactions.acquisitions} total acquisitions </h6>\n                            </div>\n                            <div>\n                                <h6>{props.team.transactions.moveToActive} total roster changes </h6>\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <TeamTable\n                            deviationFromProjection={props.deviationFromProjection}\n                            team={props.team}\n                            matchups={props.matchups}\n                            deviationFromOptimizedTotal={props.deviationFromOptimizedTotal}\n                        />\n                    </div>\n                    <div className='roster-table-row row'>\n                        <RosterTable\n                            header='Actual Roster'\n                            scoringPeriodId={props.scoringPeriodId}\n                            roster={props.roster}\n                        />\n                        <h1>VS.</h1>\n                        <RosterTable\n                            header='Optimized Roster'\n                            scoringPeriodId={props.scoringPeriodId}\n                            roster={props.optimizedRoster}\n                        />\n                    </div>\n                </React.Fragment >\n            )\n            }\n        </React.Fragment >\n    )\n}\nexport default withRouter(TeamPage)","import React from \"react\"\nimport { Route } from \"react-router-dom\"\nimport HomePage from '../../views/homePage/HomePage'\nimport League from \"../../../League\"\nimport TeamPage from '../../views/teamPage/TeamPage'\n\nconst ContentRouter = (props) => {\n    var state = props.state\n    var onTeamClick = props.onTeamClick\n    var onWeekChange = props.onWeekChange\n\n    return (\n        <React.Fragment>\n            <div className=\"container-fluid\">\n                {/* /* components will be individual routers */\n        /* Top left \"logo\" route */}\n                {/* Top navbar routes */}\n\n                <Route path=\"\" component=\"\" />\n                <Route\n                    exact path=\"/\"\n                    render={props => <HomePage {...props} leagueName={state.leagueName} teams={state.teams} onTeamClick={onTeamClick} />} />\n                <Route path='/teamPage'\n                    render={props => <TeamPage {...props} team={state.activeTeam} matchups={state.activeTeamMatchups} roster={state.activeRoster} ready={state.ready} deviationFromProjection={state.deviationFromProjection} onWeekChange={onWeekChange} scoringPeriodId={state.scoringPeriodId} deviationFromOptimizedTotal={state.deviationFromOptimizedTotal} optimizedRoster={state.optimizedRoster}/>} />\n                <Route path='/league'\n                    render={props => <League {...props} team={state.activeTeam} />} />\n\n            </div>\n        </React.Fragment>\n    )\n}\nexport default ContentRouter","import React from 'react'\nimport { withRouter, Link } from \"react-router-dom\";\nimport './NavBar.css'\n\n\n\nconst NavBar = props => {\n\n    return (\n        <React.Fragment>\n            <div className=\"head-padding\">\n                <div className=\"header-area blacknav\">\n                    <div id=\"sticky-header\" className=\"main-header-area\">\n                        <div className=\"container-fluid p-0\">\n                            <div className=\"row align-items-center no-gutters\">\n                                <div className=\"col-xl-2 col-lg-2\">\n                                    <Link to={process.env.PUBLIC_URL + '/'}>\n                                        <img\n                                            src=\"https://avatars3.githubusercontent.com/u/42056419?s=460&u=b59de0b1bd390f01b3f6b6a90b049a3f76211278&v=4\"\n                                            width=\"45\"\n                                            height=\"45\"\n                                            className=\"d-inline-block align-top\"\n                                            alt=\"HubLink logo\"\n                                        />\n                                        <div className=\"navbar-logo mt-1\">Fantasize</div></Link>\n                                </div>\n                                <div className=\"col-xl-8 col-lg-8\">\n                                    <div className=\"main-menu  d-none d-lg-block text-center\">\n                                        <nav>\n                                            <ul id=\"navigation\">\n                                                <li>\n                                                    <a className=\"active\" href=\"/\">Home</a>\n                                                </li>\n                                                <li>\n                                                    <a href=\"/register\">Register</a>\n                                                </li>\n                                                <li>\n                                                    <a href=\"/blogs\">Blog</a>\n                                                </li>\n                                                <li>\n                                                    <a href=\"/faq\">FAQ</a>\n                                                </li>\n                                                <li>\n                                                    <a href=\"/about\">About Us</a>\n                                                </li>\n\n                                            </ul>\n                                        </nav>\n                                    </div>\n                                </div>\n                                <div className=\"col-lg-2 d-none d-lg-block\">\n                                    <div className=\"log_chat_area d-flex align-items-end\">\n                                        <a href=\"/login\" data-scroll-nav=\"0\" className=\"say_hi log-hed\">Log In</a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* <Navbar collapseOnSelect expand=\"lg\" bg='fantasize' variant=\"fantasize\">\n                <Navbar.Brand href={process.env.PUBLIC_URL + '/'}>HOME</Navbar.Brand>\n                        <NavDropdown title=\"Teams\" id=\"collasible-nav-dropdown\">\n                            {props.teams && props.teams.map((team, idx) => {\n                                return (\n\n                                    <NavDropdown.Item href=\"/teamPage\"\n                                        key={idx}\n                                        id={team.id}\n                                        onClick={props.onTeamClick}\n                                    >  {team.name} ({team.abbreviation})</NavDropdown.Item>\n\n                                )\n                            })}\n            </Navbar> */}\n        </React.Fragment>\n    )\n}\n\nexport default withRouter(NavBar)","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\n\nconst Footer = props => {\n    return (\n        <React.Fragment>\n\n        </React.Fragment>\n    )\n}\n\nexport default withRouter(Footer)","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport ESPN from '../../../services/espnService'\nimport ContentRouter from '../../navigation/contentRouter/ContentRouter'\nimport NavBar from '../../navigation/navBar/NavBar'\nimport Footer from '../../footer/Footer'\n\n\n\n\nclass Layout extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            leagueName: '',\n            scoringPeriodId: '1',\n            teams: '',\n            activeTeam: '',\n            ready: false,\n\n\n\n        }\n    }\n\n    getAllClicked = evt => {\n        for (var i = 0; i < 17; i++) {\n\n        }\n    }\n\n    onWeekChange = event => {\n        const key = event.target.name;\n        const value = event.target.value;\n        console.log(key, value)\n        this.setState({\n            [key]: value\n        });\n        ESPN.getRoster(value, this.state.activeTeam.id, 551382, this.getRosterSuccess, this.getRosterError)\n    };\n    onTeamClick = evt => {\n        ESPN.getMatchupStats(this.state.scoringPeriodId, evt.target.id, 551382, this.getMatchupStatsSuccess, this.getMatchupStatsError)\n        ESPN.getRoster(this.state.scoringPeriodId, evt.target.id, 551382, this.getRosterSuccess, this.getRosterError)\n        ESPN.myTeam(this.state.scoringPeriodId, evt.target.id, 551382, this.getMyTeamSuccess, this.getMyTeamError)\n        var target = evt.target.id\n        var value = evt.target.value\n        var teams = this.state.teams\n        var matchups = this.state.matchups\n\n        function getTeamClicked(a) {\n            var c = teams\n            var target = a\n            for (var i = 0; i < teams.length; i++) {\n                if (target == teams[i].id) {\n\n                    return teams[i]\n                }\n            }\n        }\n\n        function getTeamMatchups(a) {\n            var c = matchups\n            var target = a\n            var teamMatchups = []\n            for (var ii = 0; ii < matchups.length; ii++) {\n                if (target == matchups[ii].away.teamId || target == matchups[ii].home.teamId) {\n                    teamMatchups.push(matchups[ii])\n                }\n            }\n            return teamMatchups\n        }\n\n        this.setState({\n            ...this.state,\n            activeTeam: getTeamClicked(target),\n            activeTeamMatchups: getTeamMatchups(target),\n        })\n    }\n\n\n\n    getRosterSuccess = evt => {\n        console.log('my teams roster', evt)\n        const team = evt.teams[0].roster.entries\n\n        const rosterAry = []\n\n        const mockRosterArray = []\n        var projectedTotal = 0\n        var actualScore = 0\n        var benchProjection = 0\n        var benchTotal = 0\n        var optimizedLineup = []\n        var optimizedTotal = 0\n        var roster = team.map((player, idx) => {\n            player.name = player.playerPoolEntry.player.fullName\n            var playerStats = player.playerPoolEntry.player.stats\n            for (const [key, value] of Object.entries(playerStats)) {\n                if (value.statSourceId == 1 && value.statSplitTypeId == 1 && value.scoringPeriodId == this.state.scoringPeriodId) {\n                    var projectedPoints = Math.round(value.appliedTotal * 10) / 10\n                    player.projectedPoints = Math.round(value.appliedTotal * 10) / 10\n                    break;\n                }\n\n            }\n            for (const [key, value] of Object.entries(playerStats)) {\n                if (value.statSourceId == 0 && value.statSplitTypeId == 1 && value.scoringPeriodId == this.state.scoringPeriodId) {\n                    player.points = Math.round(value.appliedTotal * 10) / 10\n                    var points = Math.round(value.appliedTotal * 10) / 10\n                    // console.log(`${player.name} scored ${points} points`)\n                    break;\n                }\n            }\n            // for (const [key, value] of Object.entries(playerStats)) {\n            //     if (!(value.statSourceId == 0 && value.statSplitTypeId == 1)) {\n            //         player.points = Math.round(value.appliedTotal * 10) / 10\n            //         var points = Math.round(value.appliedTotal * 10) / 10\n            //         console.log(`${player.name} is on a bye and scored ${points} points`)\n            //         break;\n            //     }\n            // }\n            // var points = Math.round(player.playerPoolEntry.appliedStatTotal * 10) / 10\n            if (points == null) {\n                points = 0\n                // player.name = `*${player.name}`\n            }\n            var i = player.playerPoolEntry.player.stats.length - 1\n            var seasonAverage = Math.round(player.playerPoolEntry.player.stats[i].appliedAverage * 10) / 10\n            var deviation = Math.round((points - projectedPoints) * 10) / 10\n            var deviationAvg = Math.round((points - seasonAverage) * 10) / 10\n\n\n\n            if (player.lineupSlotId == 0) {\n                player.order = 1\n                player.lineupSlot = 'QB'\n                player.starter = true\n            }\n            if (player.lineupSlotId == 2) {\n                player.order = 2\n                player.lineupSlot = 'RB'\n                player.starter = true\n            }\n            if (player.lineupSlotId == 4) {\n                player.order = 3\n                player.lineupSlot = 'WR'\n                player.starter = true\n            }\n            if (player.lineupSlotId == 6) {\n                player.order = 4\n                player.lineupSlot = 'TE'\n                player.starter = true\n            }\n\n            if (player.lineupSlotId == 23) {\n                player.order = 5\n                player.lineupSlot = 'FLEX'\n                player.starter = true\n            }\n            if (player.lineupSlotId == 16) {\n                player.order = 6\n                player.lineupSlot = 'D/ST'\n                player.starter = true\n            }\n            if (player.lineupSlotId == 17) {\n                player.order = 7\n                player.lineupSlot = 'K'\n                player.starter = true\n            }\n            if (player.lineupSlotId == 20) {\n                player.order = 8\n                player.lineupSlot = 'BENCH'\n                player.starter = false\n\n            }\n            if (player.lineupSlotId == 21) {\n                player.order = 9\n                player.lineupSlot = 'IR'\n                player.starter = false\n\n            }\n\n            if (player.starter) {\n                projectedTotal += projectedPoints\n                actualScore += points\n            }\n\n            if (!player.starter) {\n                benchProjection += projectedPoints\n                benchTotal += points\n\n            }\n\n\n\n\n            mockRosterArray.push(player)\n\n            return rosterAry.push(player)\n\n        })\n\n        const clonedTeam = JSON.parse(JSON.stringify(rosterAry))\n\n        function benchCompare(a, b) {\n            const playerA = a\n            const playerB = b\n            const playerAslots = a.playerPoolEntry.player.eligibleSlots\n            const playerBposition = b.lineupSlotId\n            const playerAname = a.playerPoolEntry.player.fullName\n            const playerBname = b.playerPoolEntry.player.fullName\n            for (var i = 0; i < playerAslots.length; i++) {\n\n                if (!playerA.starter && (playerAslots[i] == playerBposition)) {\n                    // console.log(`${playerAname} is eligible at ${playerAslots[i]} and ${playerBname} is starting at ${playerBposition}`, (playerAslots[i] == playerBposition))\n                    var eligibleSwap = true\n                }\n            }\n            return eligibleSwap\n        }\n\n        function starterScoreCompare(rr, yy) {\n            const playerA = rr\n            const playerB = yy\n            const playerAslots = rr.playerPoolEntry.player.eligibleSlots\n            const playerBposition = yy.lineupSlotId\n            const playerAname = rr.playerPoolEntry.player.fullName\n            const playerBname = yy.playerPoolEntry.player.fullName\n            const pos = (yy.lineupSlotId !== 23 && yy.lineupSlotId !== 20)\n            const flex = (rr.lineupSlotId == 23)\n            // console.log(`${playerAname} is flex : ${flex}`)\n            // console.log(`${playerAname} is not a flex or bench  : ${pos}`)\n\n            for (var i = 0; i < playerAslots.length; i++) {\n\n                if (pos && flex && (playerAslots[i] == playerBposition)) {\n                    // console.log(`${playerAname} is eligible at ${playerAslots[i]} and ${playerBname} is starting at ${playerBposition}`, (playerAslots[i] == playerBposition))\n                    var starterFlexSwap = true\n                }\n            }\n            return starterFlexSwap\n        }\n\n        function scoreCompare(aa, bb) {\n            const teamA = aa.points\n            const teamB = bb.points\n            let comparison = 0;\n            if (teamA > teamB) {\n                comparison = 1;\n            } else if (teamA < teamB) {\n                comparison = -1;\n            }\n            return comparison;\n\n        }\n\n        function optimizedMyRosterFunc(roster) {\n            var felterTeam = roster.map((mockPlayer, idx) => {\n                const playerA = mockPlayer\n                // const playerB = b\n                const playerAslots = mockPlayer.playerPoolEntry.player.eligibleSlots\n                // const playerBposition = b.lineupSlotId\n                const playerAname = mockPlayer.playerPoolEntry.player.fullName\n                // const playerBname= b.playerPoolEntry.player.fullName\n                // console.log(`${playerAname} is on the BENCH`)\n\n\n                for (const [key, value] of Object.entries(roster)) {\n                    const playerBname = value.playerPoolEntry.player.fullName\n                    // var blah = clonedTeam.sort(scoreCompare)\n                    // console.log(`${playerBname} is a Starter`)\n                    var eligibleSwap = benchCompare(playerA, value)\n                    var eligibleStartFlexSwap = starterScoreCompare(playerA, value)\n                    if (value.starter && eligibleSwap && (mockPlayer.points > value.points)) {\n                        var pointDiff = Math.round((mockPlayer.points - value.points) * 10) / 10\n                        // console.log(`${playerAname} outscored ${playerBname} by ${pointDiff} points`)\n                        var benchId = 20\n                        var starterId = value.lineupSlotId\n                        var oldBenchPlayerSlot = mockPlayer.lineupSlot\n                        var oldStarterPlayerSlot = value.lineupSlot\n                        var oldBenchOrder = mockPlayer.order\n                        var oldStarterOrder = value.order\n                        mockPlayer.lineupSlotId = starterId\n                        mockPlayer.starter = true\n                        mockPlayer.highlight = true\n                        mockPlayer.lineupSlot = oldStarterPlayerSlot\n                        mockPlayer.order = oldStarterOrder\n                        value.order = oldBenchOrder\n                        value.lineupSlot = oldBenchPlayerSlot\n                        value.lineupSlotId = benchId\n                        value.starter = false\n                        value.lowlight = true\n                        optimizedTotal += pointDiff\n                        // console.log(optimizedTotal)\n                        // break;\n                    }\n                    // ***********************************************FIGURE THIS OUT*******************\n                    if (value.starter && eligibleStartFlexSwap && (mockPlayer.points > value.points)) {\n                        console.log(`${playerAname} played at ${mockPlayer.lineupSlot} and outscored ${playerBname} playing at ${value.lineupSlot} by ${pointDiff} points`)\n                        var benchId = mockPlayer.lineupSlotId\n                        var starterId = value.lineupSlotId\n                        var oldBenchPlayerSlot = mockPlayer.lineupSlot\n                        var oldStarterPlayerSlot = value.lineupSlot\n                        var oldBenchOrder = mockPlayer.order\n                        var oldStarterOrder = value.order\n                        mockPlayer.lineupSlotId = starterId\n                        mockPlayer.highlight = true\n                        mockPlayer.lineupSlot = oldStarterPlayerSlot\n                        mockPlayer.order = oldStarterOrder\n                        value.order = oldBenchOrder\n                        value.lineupSlot = oldBenchPlayerSlot\n                        value.lineupSlotId = benchId\n                        value.lowlight = true\n                        // optimizedTotal += pointDiff\n                    }\n                    // **********************************************************************************\n\n\n\n                    // if (value.statSourceId == 1 && value.statSplitTypeId == 1 && value.scoringPeriodId == this.state.scoringPeriodId) {\n                    //     var projectedPoints = Math.round(value.appliedTotal * 10) / 10\n                    //     break;\n                    // }\n                }\n\n                return mockPlayer\n\n            })\n            return felterTeam\n        }\n        const optimizedTeamV1 = optimizedMyRosterFunc(clonedTeam);\n        const optiTeamV1Clone = JSON.parse(JSON.stringify(optimizedTeamV1))\n\n        const optimizedTeamV2 = optimizedMyRosterFunc(optiTeamV1Clone)\n        const optiTeamV2Clone = JSON.parse(JSON.stringify(optimizedTeamV2))\n\n        const optimizedTeamV3 = optimizedMyRosterFunc(optiTeamV2Clone)\n        const optiTeamV3Clone = JSON.parse(JSON.stringify(optimizedTeamV3))\n\n        const optimizedTeamV4 = optimizedMyRosterFunc(optiTeamV3Clone)\n\n\n        console.log('optimizedTeamV1: ', optimizedTeamV1)\n        console.log('optimizedTeamV2: ', optimizedTeamV2)\n        console.log('optimizedTeamV3: ', optimizedTeamV3)\n        console.log('optimizedTeamV4: ', optimizedTeamV4)\n\n\n        // const optiRoster = clonedTeam.map((mockPlayer, idx) => {\n        //     const playerA = mockPlayer\n        //     // const playerB = b\n        //     const playerAslots = mockPlayer.playerPoolEntry.player.eligibleSlots\n        //     // const playerBposition = b.lineupSlotId\n        //     const playerAname = mockPlayer.playerPoolEntry.player.fullName\n        //     // const playerBname= b.playerPoolEntry.player.fullName\n        //     // console.log(`${playerAname} is on the BENCH`)\n        //     var tt = 0\n        //     while (tt < 289) {\n        //         tt++\n        //         // console.log(tt)\n\n        //         for (const [key, value] of Object.entries(clonedTeam)) {\n        //             const playerBname = value.playerPoolEntry.player.fullName\n        //             // var blah = clonedTeam.sort(scoreCompare)\n        //             // console.log(`${playerBname} is a Starter`)\n        //             var eligibleSwap = benchCompare(playerA, value)\n        //             if (value.starter && eligibleSwap && (mockPlayer.points > value.points)) {\n        //                 var pointDiff = Math.round((mockPlayer.points - value.points) * 10) / 10\n        //                 // console.log(`${playerAname} outscored ${playerBname} by ${pointDiff} points`)\n        //                 var benchId = 20\n        //                 var starterId = value.lineupSlotId\n        //                 var oldBenchPlayerSlot = mockPlayer.lineupSlot\n        //                 var oldStarterPlayerSlot = value.lineupSlot\n        //                 var oldBenchOrder = mockPlayer.order\n        //                 var oldStarterOrder = value.order\n        //                 mockPlayer.lineupSlotId = starterId\n        //                 mockPlayer.starter = true\n        //                 mockPlayer.highlight = true\n        //                 mockPlayer.lineupSlot = oldStarterPlayerSlot\n        //                 mockPlayer.order = oldStarterOrder\n        //                 value.order = oldBenchOrder\n        //                 value.lineupSlot = oldBenchPlayerSlot\n        //                 value.lineupSlotId = benchId\n        //                 value.starter = false\n        //                 value.lowlight = true\n        //                 optimizedTotal += pointDiff\n        //                 // console.log(optimizedTotal)\n        //                 // break;\n        //             }\n        //             // if (value.statSourceId == 1 && value.statSplitTypeId == 1 && value.scoringPeriodId == this.state.scoringPeriodId) {\n        //             //     var projectedPoints = Math.round(value.appliedTotal * 10) / 10\n        //             //     break;\n        //             // }\n        //         }\n\n        //         return mockPlayer\n        //     }\n        // })\n\n        // const optimizedTeam = JSON.parse(JSON.stringify(clonedTeam))\n\n        // const sloptiRoster = optimizedTeam.map((mockPlayer, idx) => {\n        //     const playerA = mockPlayer\n        //     // const playerB = b\n        //     const playerAslots = mockPlayer.playerPoolEntry.player.eligibleSlots\n        //     // const playerBposition = b.lineupSlotId\n        //     const playerAname = mockPlayer.playerPoolEntry.player.fullName\n        //     // const playerBname= b.playerPoolEntry.player.fullName\n        //     // console.log(`${playerAname} is on the BENCH`)\n        //     var tt = 0\n        //     while (tt < 289) {\n        //         tt++\n        //         // console.log(tt)\n\n        //         for (const [key, value] of Object.entries(optimizedTeam)) {\n        //             const playerBname = value.playerPoolEntry.player.fullName\n        //             // var blah = clonedTeam.sort(scoreCompare)\n        //             // console.log(`${playerBname} is a Starter`)\n        //             var eligibleSwap = benchCompare(playerA, value)\n        //             if (value.starter && eligibleSwap && (mockPlayer.points > value.points)) {\n        //                 var pointDiff = Math.round((mockPlayer.points - value.points) * 10) / 10\n        //                 // console.log(`${playerAname} outscored ${playerBname} by ${pointDiff} points`)\n        //                 var benchId = 20\n        //                 var starterId = value.lineupSlotId\n        //                 var oldBenchPlayerSlot = mockPlayer.lineupSlot\n        //                 var oldStarterPlayerSlot = value.lineupSlot\n        //                 var oldBenchOrder = mockPlayer.order\n        //                 var oldStarterOrder = value.order\n        //                 mockPlayer.lineupSlotId = starterId\n        //                 mockPlayer.starter = true\n        //                 mockPlayer.highlight = true\n        //                 mockPlayer.lineupSlot = oldStarterPlayerSlot\n        //                 mockPlayer.order = oldStarterOrder\n        //                 value.order = oldBenchOrder\n        //                 value.lineupSlot = oldBenchPlayerSlot\n        //                 value.lineupSlotId = benchId\n        //                 value.starter = false\n        //                 value.lowlight = true\n        //                 optimizedTotal += pointDiff\n        //                 // console.log(optimizedTotal)\n        //                 // break;\n        //             }\n        //             // if (value.statSourceId == 1 && value.statSplitTypeId == 1 && value.scoringPeriodId == this.state.scoringPeriodId) {\n        //             //     var projectedPoints = Math.round(value.appliedTotal * 10) / 10\n        //             //     break;\n        //             // }\n        //         }\n\n        //         return mockPlayer\n        //     }\n        // })\n\n        // const sloptimizedTeam = JSON.parse(JSON.stringify(sloptiRoster))\n\n        // const sloptimizedRoster = sloptimizedTeam.map((mockPlayer, idx) => {\n        //     const playerA = mockPlayer\n        //     // const playerB = b\n        //     const playerAslots = mockPlayer.playerPoolEntry.player.eligibleSlots\n        //     // const playerBposition = b.lineupSlotId\n        //     const playerAname = mockPlayer.playerPoolEntry.player.fullName\n        //     // const playerBname= b.playerPoolEntry.player.fullName\n        //     // console.log(`${playerAname} is on the BENCH`)\n        //     var tt = 0\n        //     while (tt < 289) {\n        //         tt++\n        //         // console.log(tt)\n\n        //         for (const [key, value] of Object.entries(sloptimizedTeam)) {\n        //             const playerBname = value.playerPoolEntry.player.fullName\n        //             // var blah = clonedTeam.sort(scoreCompare)\n        //             // console.log(`${playerBname} is a Starter`)\n        //             var eligibleSwap = benchCompare(playerA, value)\n        //             if (value.starter && eligibleSwap && (mockPlayer.points > value.points)) {\n        //                 var pointDiff = Math.round((mockPlayer.points - value.points) * 10) / 10\n        //                 // console.log(`${playerAname} outscored ${playerBname} by ${pointDiff} points`)\n        //                 var benchId = 20\n        //                 var starterId = value.lineupSlotId\n        //                 var oldBenchPlayerSlot = mockPlayer.lineupSlot\n        //                 var oldStarterPlayerSlot = value.lineupSlot\n        //                 var oldBenchOrder = mockPlayer.order\n        //                 var oldStarterOrder = value.order\n        //                 mockPlayer.lineupSlotId = starterId\n        //                 mockPlayer.starter = true\n        //                 mockPlayer.highlight = true\n        //                 mockPlayer.lineupSlot = oldStarterPlayerSlot\n        //                 mockPlayer.order = oldStarterOrder\n        //                 value.order = oldBenchOrder\n        //                 value.lineupSlot = oldBenchPlayerSlot\n        //                 value.lineupSlotId = benchId\n        //                 value.starter = false\n        //                 value.lowlight = true\n        //                 optimizedTotal += pointDiff\n        //                 // console.log(optimizedTotal)\n        //                 // break;\n        //             }\n        //             // if (value.statSourceId == 1 && value.statSplitTypeId == 1 && value.scoringPeriodId == this.state.scoringPeriodId) {\n        //             //     var projectedPoints = Math.round(value.appliedTotal * 10) / 10\n        //             //     break;\n        //             // }\n        //         }\n\n        //         return mockPlayer\n        //     }\n        // })\n\n        // // console.log(optimizedTotal)\n\n        // // var optiRosterTotal = optiRoster.map((player, idx) => {\n        // //     if (player.starter) {\n        // //         return optimizedTotal += player.points\n        // //     }\n        // // })\n        // console.log('CLONED TEAM: ', clonedTeam)\n        // // var optimizedRoster = clonedTeam.sort(benchCompare)\n\n        // // console.log('optimized roster: ', optimizedRoster)\n        // console.log('OPTIroster: ', optiRoster)\n        // console.log('SLOPTIroster: ', sloptiRoster)\n        // console.log('DUBSLOPTIroster: ', sloptimizedRoster)\n\n\n\n        function compare(a, b) {\n            const teamA = a.order\n            const teamB = b.order\n            let comparison = 0;\n            if (teamA > teamB) {\n                comparison = 1;\n            } else if (teamA < teamB) {\n                comparison = -1;\n            }\n            return comparison;\n\n        }\n        const sortedOptimizedRoster = optimizedTeamV4.sort(compare)\n        const sortedRoster = rosterAry.sort(compare)\n        // var deviationFromOptimizedTotal = Math.round((optimizedTotal - actualScore) *10) /10\n        var deviationFromProjection = Math.round((actualScore - projectedTotal) * 10) / 10\n        this.setState({\n            ...this.state,\n            activeRoster: sortedRoster,\n            ready: true,\n            projectedTotal: projectedTotal,\n            actualScore: actualScore,\n            deviationFromProjection: deviationFromProjection,\n            deviationFromOptimizedTotal: Math.round(optimizedTotal) * 10 / 10,\n            optimizedRoster: sortedOptimizedRoster\n\n        })\n    }\n\n\n\n\n\n    getRosterError = err => {\n        console.log('get roster error: ', err)\n    }\n\n    getMyTeamSuccess = evt => {\n        // console.log(\" MY TEAM STATS : \", evt)\n    }\n\n    getMyTeamError = err => {\n        console.log('MY TEAM FAILED : ', err)\n    }\n\n    onGetMatchupStats = evt => {\n        ESPN.getMatchupStats(13, 1, 551382, this.getMatchupStatsSuccess, this.getMatchupStatsError)\n    }\n\n    getMatchupStatsSuccess = evt => {\n        var teams = this.state.teams\n\n        var matchups = evt.data.schedule.map((matchup, idx) => {\n            var homeAway = []\n\n            for (const [key, value] of Object.entries(this.state.teams)) {\n                if (value.id === matchup.home.teamId) {\n                    var homeId = value.id\n                    var homeTeam = value.name\n                    var homeAbbrev = value.abbreviation\n                }\n                if (value.id === matchup.away.teamId) {\n                    var awayId = value.id\n                    var awayAbbrev = value.abbreviation\n\n                    var awayTeam = value.name\n                }\n            }\n\n            var homeId = homeId\n            var awayId = awayId\n            var week = matchup.matchupPeriodId\n            var homeTeam = homeTeam\n            var homeScore = Math.round(matchup.home.totalPoints * 10) / 10\n            var awayTeam = awayTeam\n            var awayScore = Math.round(matchup.away.totalPoints * 10) / 10\n            var homeAbbrev = homeAbbrev\n            var awayAbbrev = awayAbbrev\n            var winner = (matchup.winner === \"HOME\") ? homeAbbrev : awayAbbrev\n\n            return {\n                'homeId': homeId,\n                'awayId': awayId,\n                'week': week,\n                'homeTeam': homeTeam,\n                'homeScore': homeScore,\n                'awayTeam': awayTeam,\n                'awayScore': awayScore,\n                'winner': winner,\n                'homeAbbrev': homeAbbrev,\n                'awayAbbrev': awayAbbrev\n            }\n\n        })\n\n\n        function getTeamMatchups(a, b) {\n            var matchups = a\n            var target = b\n            var teamMatchups = []\n            for (var ii = 0; ii < matchups.length; ii++) {\n                if (target == matchups[ii].awayId || target == matchups[ii].homeId) {\n                    teamMatchups.push(matchups[ii])\n                }\n            }\n            return teamMatchups\n        }\n        this.setState({\n            ...this.state,\n            members: evt.members,\n            schedule: matchups,\n            activeTeamMatchups: getTeamMatchups(matchups, this.state.activeTeam.id),\n            seasonId: evt.seasonId,\n            status: evt.status,\n        })\n    }\n\n    getMatchupStatsError = err => {\n        console.log('get MatchupStats err ', err)\n    }\n\n    onGetLeagueInfoSuccess = evt => {\n        this.setState({\n            ...this.state,\n            leagueName: evt.name\n        })\n    }\n\n    onGetLeagueInfoError = err => {\n        console.log('could not get league info: ', err)\n    }\n\n    onTeamsAtWeekSuccess = evt => {\n        var teams = evt.map((team, idx) => {\n            return {\n                idx: idx,\n                name: team.name,\n                abbreviation: team.abbreviation,\n                id: team.id,\n                logo: team.logoURL,\n                totalPointsFor: team.totalPointsScored,\n                totalPointsAgainst: team.regularSeasonPointsAgainst,\n                winningPercentage: team.winningPercentage,\n                finalStandingsPosition: team.finalStandingsPosition,\n                playoffSeed: team.playoffSeed,\n                rosterAtWeek: team.roster,\n                wins: team.wins,\n                losses: team.losses,\n            }\n\n        })\n\n        function compare(a, b) {\n            const teamA = a.finalStandingsPosition\n            const teamB = b.finalStandingsPosition\n            let comparison = 0;\n            if (teamA > teamB) {\n                comparison = 1;\n            } else if (teamA < teamB) {\n                comparison = -1;\n            }\n            return comparison;\n\n        }\n\n        var sortedTeams = teams.sort(compare)\n        this.setState({\n            ...this.state,\n            teams: sortedTeams,\n        })\n    }\n\n    onTeamsAtWeekError = err => {\n        console.log('TeamsAtWeek errror', err)\n    }\n\n    onStandingsSuccess = evt => {\n        var leagueName = evt.settings.name\n        var seasonId = evt.id\n\n        var teams = evt.teams.map((team, idx) => {\n            var name = [team.location, team.nickname].join(' ')\n            var id = team.id\n            var abbreviation = team.abbrev\n            var owner = team.owners[0]\n            var logoURL = team.logo\n            var totalPointsFor = Math.round(team.points * 10) / 10\n            var record = team.record.overall\n            var wins = team.record.overall.wins\n            var losses = team.record.overall.losses\n            var totalPointsAgainst = Math.round(team.record.overall.pointsAgainst * 10) / 10\n            var finalStandingsPosition = team.rankCalculatedFinal\n            var playoffSeed = team.playoffSeed\n            var roster = team.roster\n            var transactions = team.transactionCounter\n\n\n            return {\n                'id': id,\n                'name': name,\n                'abbreviation': abbreviation,\n                'owner': owner,\n                [id]: name,\n                'logoURL': logoURL,\n                'totalPointsFor': totalPointsFor,\n                'totalPointsAgainst': totalPointsAgainst,\n                'record': record,\n                'wins': wins,\n                'losses': losses,\n                'finalStandingsPosition': finalStandingsPosition,\n                'playoffSeed': playoffSeed,\n                'roster': roster,\n                'transactions': transactions,\n\n            }\n        })\n\n        function compare(a, b) {\n            const teamA = a.finalStandingsPosition\n            const teamB = b.finalStandingsPosition\n            let comparison = 0;\n            if (teamA > teamB) {\n                comparison = 1;\n            } else if (teamA < teamB) {\n                comparison = -1;\n            }\n            return comparison;\n\n        }\n\n        var sortedTeams = teams.sort(compare)\n\n        this.setState({\n            ...this.state,\n            leagueName: leagueName,\n            teams: sortedTeams,\n            seasonId: seasonId,\n            matchups: evt.schedule\n\n        })\n        // this.onGetMatchupStats()\n\n        // this.onGetPlayers()\n        // this.onGetTeamStats()\n    }\n\n    onStandingsrror = err => {\n        console.log('standings err', err)\n    }\n    onBoxScoreSuccess = evt => {\n        // console.log('box score success', evt)\n    }\n    onBoxScoreError = err => {\n        console.log('box score error', err)\n    }\n\n    componentDidMount() {\n        // ESPN.getTeamsAtWeek(this.state.scoringPeriodId, this.onTeamsAtWeekSuccess, this.onTeamsAtWeekError)\n        // ESPN.getLeagueInfo(this.onGetLeagueInfoSuccess, this.onGetLeagueInfoError)\n        console.log('page loaded')\n        ESPN.getStandings(551382, this.onStandingsSuccess, this.onStandingsrror)\n        ESPN.boxScore(this.state.scoringPeriodId, 551382, this.onBoxScoreSuccess, this.onBoxScoreError)\n\n    }\n\n    render() {\n        console.log('this.state', this.state)\n        return (\n            <React.Fragment>\n                <div className=\"layout-inner\" >\n\n                    <div className=\"layout-navbar sticky-top\">\n\n                        <div className=\"navbar-row\" >\n                            <NavBar\n                                teams={this.state.teams}\n                                onWeekChange={this.onWeekChange}\n                                state={this.state}\n                                onTeamClick={this.onTeamClick}\n\n                            />\n                        </div>\n                    </div>\n                    <div className=\"layout-container\">\n\n                        <div className=\"layout-content\">\n                            <div className=\"container-fluid\">\n                                <div className='row'>\n                                    <div className='col'>\n                                        {(this.state.leagueName && this.state.teams) && (\n                                            <ContentRouter\n                                                state={this.state}\n                                                onTeamClick={this.onTeamClick}\n                                                activeTeam={this.state.activeTeam}\n                                                activeRoster={this.state.activeRoster}\n                                                onWeekChange={this.onWeekChange}\n                                            />\n                                        )}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className='col'>\n                            <header>\n                                <Footer />\n                            </header>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withRouter(Layout)","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport ESPN from './services/espnService'\nimport League from './League';\nimport { withRouter } from 'react-router-dom'\nimport Layout from './components/templates/layout/Layout';\n// import ESPN from '../ESPN-Fantasy-Football-API/src/client'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Layout />\n      {/* <League /> */}\n    </div>\n\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}